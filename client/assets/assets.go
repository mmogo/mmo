// Code generated by go-bindata.
// sources:
// assets/sprites/loot.png
// assets/sprites/player.png
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _spritesLootPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xa1\x07\x5e\xf8\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x06\x00\x00\x01\x04\x7d\x4a\x62\x00\x00\x00\x06\x62\x4b\x47\x44\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x07\x74\x49\x4d\x45\x07\xe1\x06\x1b\x07\x10\x2a\x8d\xa2\x8a\xbb\x00\x00\x00\x1d\x69\x54\x58\x74\x43\x6f\x6d\x6d\x65\x6e\x74\x00\x00\x00\x00\x00\x43\x72\x65\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x47\x49\x4d\x50\x64\x2e\x65\x07\x00\x00\x07\x05\x49\x44\x41\x54\x58\xc3\x9d\x97\x6f\x8c\x15\x67\x15\xc6\x7f\xb3\xbb\xb0\x08\x52\xca\x5e\xa0\x4d\x4c\x8c\xc2\x39\x50\x5b\x08\xb6\xa5\xde\x10\xb1\xc5\xc6\x56\xde\xab\x26\x2a\xc6\xac\xa6\x31\x69\x30\x26\x95\xce\x84\x56\x9b\x10\xad\xa1\xa4\x6d\xe4\xc3\x1a\xea\x5c\x53\xbf\x28\xa9\xfa\xa5\xd6\x12\x54\xe2\xbc\xa4\xd2\x56\x51\x24\x8b\xf8\x2f\x02\x09\x9e\x83\x69\x69\x5a\xa2\xd1\x4b\x11\xad\x94\x85\xbd\x7e\x98\xb9\xf7\xee\xbf\x52\xea\xfb\xe5\xde\x99\x79\xe7\xbc\xe7\x3c\xe7\x3c\xcf\x39\x03\x53\x56\x02\x50\x14\xc5\x7c\x8f\xd9\xbf\x50\x1d\xef\x3e\x49\x83\xb4\xcd\xf2\x76\xff\xc8\x43\x0f\xb3\x65\xd5\x4b\xed\x7d\xa3\x8e\xd4\x84\x7e\x80\xbd\x3f\xd9\xc5\xa2\xc5\x17\x1e\x3c\x7c\xd8\x0f\x00\x90\xa7\xd2\x0e\x42\xbb\x6b\x34\x04\xda\x21\x04\x44\x64\xac\xaf\xc8\xc3\xd7\x05\xc1\x0c\x80\xf3\x93\x7c\x28\x8a\xfc\xbd\x69\x2a\x6d\x11\xda\x21\xc8\xa5\xae\x89\xce\x0a\x22\x63\x86\x0f\x28\x42\x1e\x33\x40\xfe\xd1\x07\x70\xe8\xd9\x5d\x94\x6f\x31\x90\x85\x50\x3d\x04\x60\x51\x92\xa7\xe1\x3a\x51\x3b\x14\x23\x73\x54\x18\x14\x0d\x77\xc5\xe8\x73\x81\x25\x2a\xf2\xcd\x64\x2a\x16\x79\x9e\x2e\x01\x3d\x33\x7e\xf6\xb7\x63\x5b\xbe\xf6\x03\xfa\x26\x3e\xb4\x22\x6f\xc7\x18\xff\x86\xc5\x0b\xcb\x6f\xbe\xe5\xdd\x00\x03\xbd\x08\xd2\x76\xde\xcc\x49\x53\x05\x17\x80\xd9\x93\xa2\x08\x41\x3e\x86\xf9\x4f\xcd\x21\x4b\x03\x21\x04\x0c\x66\x0f\xf4\xec\x73\xb7\x04\x21\xa0\x84\x20\x88\x0a\x16\xe3\xdb\xfb\x00\xd2\x34\xcc\x06\xff\x84\x76\x36\xab\xe2\x80\x8a\xde\xd5\x5f\x14\xe9\x60\xe2\xa3\xdf\x43\x87\x56\x1e\x76\xc7\x47\x81\x56\x0b\x86\x5a\xb4\xa8\x7d\xb6\xbf\x3e\x54\xfb\x11\xb4\x36\xb6\x9c\xa4\x2e\xf5\x73\x24\xf5\x95\xad\x56\xeb\x94\x1f\x6e\x1d\xd5\x9a\xee\x9d\x86\xc3\x94\xdc\x6c\xf2\x18\x3f\x8c\x72\x0a\xf8\x92\x20\xbb\xdd\xfc\x58\xd6\x8c\xdb\x26\xd5\xd0\x0c\x2f\xae\x55\xec\x37\x31\x3a\x31\x1a\xa2\xa0\x41\xb1\x68\x64\x69\x36\x8e\xca\xf5\xaa\x8d\x13\x33\x1a\x28\x8a\xfc\x3d\x31\xe6\xc7\x83\x82\x1b\xe0\x80\xf4\x82\xc7\x40\x54\xd0\x10\x96\xab\x36\x6c\x46\x0f\x42\x90\xdb\x31\x7f\x16\x04\x14\xd2\xa0\xb8\x51\xc1\x1b\xa0\xb4\xfb\x5f\xe0\xda\x49\x06\xda\x6d\x4b\x1a\x1a\xbe\x01\x7e\x5f\x08\x01\x94\x4e\xe1\x96\xee\x08\x28\x0a\x0a\x22\x32\xa6\x84\x6b\xfb\x27\x1a\xa8\xd7\x78\xfe\xf0\xe8\xbe\xcf\xa0\x40\x0b\x5a\x5e\xa6\x03\x6f\xa1\x02\x35\x00\x6a\x50\x83\xd1\xd1\xd1\x73\xad\xc4\x77\x24\x25\x89\xc2\x2f\xc1\x6e\x9d\x14\xaf\x83\xa1\x67\x80\x13\x8e\xbd\x4d\xd0\x15\x21\x0d\x27\x15\x96\x99\xdb\x9c\x72\x9f\x9e\xee\x86\x90\xa6\xe9\x2c\x25\x5e\x8d\xea\xad\x02\x4f\x03\x06\xe1\x7a\x87\x55\x98\xbd\x98\x35\x9b\xad\x99\xf0\xba\x6c\x1d\xdc\xf9\xed\x36\x1f\x3d\x9e\xf5\x01\xb7\x19\xcc\x6a\x36\x9b\xcf\x5c\xb1\x81\xa2\xc8\x17\x82\xfd\x3e\x46\xbf\x0f\x6c\x4f\xd0\xf0\x3b\xc7\xcf\x61\x6c\xca\x9a\xf1\xaf\x9d\x7d\x7d\x53\x5f\x3c\x58\x8c\x20\x92\x26\x0a\x8f\x2b\xbc\xcb\x63\xdc\xe3\x0e\x31\xc6\x9b\x2d\xda\x7a\x90\xc7\x26\xee\x9f\x66\xe0\x2c\x2f\xce\x8e\xb9\xee\x37\xb7\xe1\xbc\x19\x41\x05\x29\x99\x83\x4a\x20\x64\xe1\xea\xcb\x1a\x00\xfd\x6a\xf4\x78\xbb\x5b\xac\xc0\x2d\xa9\x67\x6e\x84\x4c\x89\xb1\xf9\x32\xc0\xe8\x81\x27\x67\x36\xe0\x6e\xab\x2d\x1a\xa2\x15\x7b\xa3\x11\x04\x54\xc0\x62\xc4\x8c\x61\xb3\x62\xe4\x9f\xff\xbe\xaa\x7f\x46\x10\x25\x84\x25\x8a\x6d\xc3\xfc\x8b\x00\x56\xd5\x46\x08\x42\x16\x2a\xbd\x53\x01\xd8\xa4\xda\xd8\x35\x30\x9d\x07\xa1\xe5\xb9\x6d\xe8\x6c\x0c\x01\x82\x2a\x1d\x5e\x48\x55\x69\x0e\x6b\x81\x5d\xd3\x43\x88\xf9\x6a\xc3\x97\x8a\xca\xc4\xa2\xec\x55\x68\x75\x6d\x31\xbe\x63\x92\x2c\x56\xda\x35\xdf\x63\x8c\x41\x05\x0d\x25\x75\x0d\xb0\x68\x18\x86\x8b\x97\x61\xaa\xa0\x52\x62\x34\x30\x05\xc0\x9b\x0c\x16\x0b\x80\x19\x46\xc9\x3e\x49\x03\xaa\x61\x8a\x38\xb0\x6e\xaa\x30\xdf\xe8\xee\xbf\x00\xc7\xad\xb7\xd1\x30\xac\x69\xb8\x44\xa8\xa8\x4c\x49\xf1\xed\x00\x03\x45\x1e\x12\x44\x96\xe2\xbe\x99\x68\xcf\xa4\x22\x77\xc6\xae\x04\xf4\x5c\x36\x20\xa8\x94\x76\x4b\x26\xde\x40\x33\xd2\x5f\x17\xbd\x69\x28\x19\xfd\xa3\x5b\x6b\x8d\xb5\x58\x96\x0c\x95\xaa\x0c\x5c\x1c\xaa\xd5\xff\xd4\xaa\xf1\xf7\x96\x71\xba\xde\x08\x73\xea\xa2\xa7\x5b\xd4\x16\x52\xea\xc4\x8d\xf5\x7a\xfd\xf4\x00\x50\x07\x3d\x07\x36\x57\x61\x30\x3a\xaf\x05\x98\x27\x41\x2f\x02\x4b\x62\x0c\x37\xa0\x7e\x87\x45\xbf\xc6\xf0\x85\xc0\x20\xc2\x88\x9a\x9c\xcf\x9a\xcd\xd7\xab\x26\x9c\xf7\x09\xf9\xfc\x10\x74\x10\x38\xa0\xb0\xc2\xe0\x73\x48\xba\xdb\x63\x5c\x91\x35\x9b\x7f\x78\x23\xd6\x5e\x56\x0f\xde\x68\xe5\x45\x91\x08\xbe\x00\xb7\xeb\x1c\x6f\x99\xc9\x6b\x8a\xdf\x63\xd8\xbd\x41\x43\x3f\xa2\x8f\xe3\xf6\x84\xe3\x17\x80\xb3\x20\xaf\x66\x59\x73\x6c\xdb\x83\x5f\x66\xfb\x23\x23\xbc\x09\x19\x67\x5e\xfb\x9e\x7a\xb8\x47\x17\x7c\x83\x62\xfb\x55\x38\x84\xd9\x09\x3c\x1e\x05\x36\xe3\x5c\x15\x63\x9c\xe7\x1e\x1f\x40\x38\x86\x99\x99\xd9\x0b\x66\xf1\xe3\xc0\xb4\xc3\xaf\x08\x81\x9f\xef\xde\xce\x1d\x1b\xb7\x51\x14\xf9\x1c\xe0\x7d\x8a\x7d\x05\x58\x67\x30\xcf\xbd\x6c\x7c\x66\x8e\x56\xd5\x32\x91\x2d\x18\x84\x2c\x20\xa2\xa7\x54\xd9\xa8\x9a\x1d\xf9\xbf\x52\x50\x14\xf9\x6a\xb0\xad\x0a\xc3\xe6\x10\xcd\x71\xb7\x89\xec\xec\x89\x99\x94\x0d\x54\xa8\xd8\x08\xe7\x31\xee\x8f\xce\x77\xb3\x2c\xbb\xf0\x96\x1d\x28\x8a\x7c\x39\x6e\x8f\x3a\xfe\x29\xac\x6c\xf3\xa0\x44\x33\xd4\x41\x42\xd5\x2b\x85\x12\x0d\x2f\xc5\x57\x42\xe9\x5e\x8c\x0e\xd0\x0a\x1a\x9e\x46\x64\x07\x70\xaa\xd1\x68\x5c\x3a\x72\xf0\x29\xd6\xbc\xff\xd3\x57\xe4\x40\x2d\x36\xe3\x3d\x8e\x6d\x16\x58\xac\xd5\x80\x0a\x60\xb1\x64\xbc\xf7\x40\x9f\x94\x86\x10\x02\x08\xb8\x4f\xb8\x86\x11\x8c\x9d\xda\x68\xbc\x72\x45\x08\xb4\xdb\x6d\x92\x24\x21\x04\x59\x8c\xf1\x05\xc3\x1f\x9a\xaa\x61\x53\xf3\xaf\x41\x11\x11\xb4\x92\xe1\x49\xaa\x5a\x8e\x24\xdf\xc7\xfc\x01\x6d\x64\xe7\x06\x2e\x77\xf8\x13\xdf\x7a\xb4\x3a\x3c\x2c\x06\xdb\x04\xfe\x48\x50\x99\x90\xe7\x6a\x62\xe9\xdc\x03\xa2\x7b\x99\xff\x69\x9d\x06\x04\xc5\xdd\xfa\xcc\x7c\x01\x58\xdf\x34\x35\x9e\xb8\x8e\xfc\xfa\x49\xd6\xac\x1b\x26\x0d\xb2\xcc\xcd\xee\x05\x1f\xee\x46\xe1\xe5\xc9\xb1\x92\x45\xab\x1c\xb1\xaa\xf4\x4d\xaa\xc9\x2e\x7a\x09\x4f\x17\x85\xd8\x71\x66\xbc\x7a\xf0\xc6\x29\x48\xd3\x30\xd7\xdd\xd6\x9b\xf9\xcf\xaa\xba\x23\x88\xf4\x7a\x6d\xe7\xd0\xea\x8f\x03\xa1\x2a\xbe\xce\x00\x37\x15\x02\xe9\xa5\xe1\x34\xf0\x79\xd5\x46\x31\x09\x81\x93\x27\x8f\xb2\x6c\xd9\x4a\x8a\x22\x9f\x0f\xac\x75\x97\x61\xb3\x66\x79\x88\x95\x0d\xba\xea\x69\x5d\xca\x95\x0c\x50\x3a\x4e\x96\x33\x9d\x4d\x6a\x5d\x5a\x35\x26\x2f\xcd\x8c\x97\xa3\xa3\x9e\xed\x22\xf0\xab\xb8\x95\x0f\x84\x1d\x13\x3e\x57\x8a\x41\x88\x1b\x30\xdf\x22\xd8\x7a\xb4\xb4\x17\x73\x9f\x54\x6c\x3d\xd1\x71\x30\xa9\x28\xda\x6d\x57\x55\x1e\xba\xe3\x40\xa7\x1f\xfe\x05\xe3\x93\x59\x33\x1e\xfb\xce\xce\xad\x24\x79\x9e\x27\x82\x2d\x05\xff\x08\xb0\xd6\xcd\x3e\x24\xca\xac\x0a\xd9\x31\x9c\x45\x36\xa1\x3f\x8a\x76\x4f\x68\x23\x3a\x0e\xe5\xa7\x21\x6e\x55\x41\xd2\x57\xe9\x40\x5b\x55\x13\x90\xa4\x13\xa8\xc5\x88\xc3\x25\xe0\xcf\x22\xe1\x31\xf7\xf8\xc3\x24\xcf\xc3\x4e\x81\xbb\x31\x5b\xe0\x53\x02\xe8\x20\x69\xde\x39\x5c\xa8\xf4\xa5\x73\xff\x39\x15\xcd\xf2\x18\x4f\x00\x89\x3b\x97\xf2\x34\x1d\x32\xf7\xdb\x80\x5b\x80\x0b\xd5\x27\xdb\x6c\xe0\x05\x15\x5e\x46\xe5\x12\xf0\x8a\xc0\x71\x87\xf3\x49\x1e\xd2\x7e\xc4\xe7\x03\xd7\x88\xa2\x6e\x2c\x31\xb7\x0f\xaa\xb0\x0a\x18\x44\xf5\x3f\x02\xef\xc4\x58\x04\x96\x38\x9c\x01\x7d\x4e\x94\x83\x20\x17\xa3\xd1\x8f\xfb\xeb\xc0\x4b\xc0\x31\x60\x8c\x32\xcf\x6d\xa0\xbf\xfa\xed\x73\x98\x15\x63\x6f\x28\x06\x78\x7e\xff\xee\x37\x11\xa1\x57\x27\x7c\xa9\xb6\xdb\x89\x59\x7b\x5e\x57\x23\xee\x5f\x3b\x6d\xff\xde\x3d\x3f\x7e\xcb\xad\xfd\x7f\x8b\x1b\x4b\xed\xf2\x6d\x00\x28\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x36\x9a\x6c\xb1\xa1\x07\x00\x00")

func spritesLootPngBytes() ([]byte, error) {
	return bindataRead(
		_spritesLootPng,
		"sprites/loot.png",
	)
}

func spritesLootPng() (*asset, error) {
	bytes, err := spritesLootPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sprites/loot.png", size: 1953, mode: os.FileMode(420), modTime: time.Unix(1498851316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spritesPlayerPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xa3\x05\x5c\xfa\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x80\x00\x00\x00\x80\x08\x06\x00\x00\x00\xc3\x3e\x61\xcb\x00\x00\x05\x68\x49\x44\x41\x54\x78\x5e\xed\x9d\xeb\x72\xeb\x20\x0c\x84\x9b\xf7\x7f\xe8\x74\xe6\x34\xf6\x24\x9c\xd8\xe8\xb2\x20\x09\xb6\x7f\x83\x84\xb4\xfa\x10\x36\x76\x93\xc7\x0f\xff\xb6\x56\xe0\xb1\x75\xf6\x4c\xfe\x87\x00\x6c\x0e\x01\x01\x20\x00\x9b\x2b\x30\x39\xfd\xe7\xf3\xf9\xb4\x4c\xf9\x78\x3c\x86\x2c\xd6\x21\x4e\x2d\x09\xee\x62\xb3\x2d\x00\xd9\x12\x9f\x05\x9c\x35\x6f\x6d\x7c\xd6\x0e\x31\xad\x03\x58\x85\xb0\x26\xa6\x15\x70\xd4\x78\x6b\xde\xda\x78\xac\x3a\x0d\x03\x20\x7b\xe2\x5a\x81\xa5\xe3\x67\xe5\xdd\xc6\x43\x00\xa4\x15\x1a\x3c\x6e\x5b\x00\xaa\x25\x8e\xe6\x20\x2a\x7f\x6f\x27\x80\x6d\x01\x51\x02\x58\x5b\x1f\x01\xf8\x53\xc0\x0d\x40\x54\xe1\xbd\xe4\xcf\x02\x40\x7a\xfb\x7e\x75\x3c\x20\xb5\x3f\xf2\x39\xfc\x48\x17\x06\x01\x00\x91\x70\xb5\x10\xa4\x05\x5c\x0e\x80\xec\x89\x83\xea\x7e\xba\x21\x00\x8d\xa2\x04\xe0\xb5\xc7\x0a\x4f\x70\xd9\x01\x8c\x00\x59\xf7\x3e\x54\x07\xf0\xae\xfc\x36\x8e\xb7\x3d\xdc\x14\x62\x9a\x6b\x80\x5d\x3a\xc0\xb6\x00\x54\x4f\xdc\xb4\xbc\xbe\x18\xb5\x3a\x48\xc1\xbf\x9a\xbf\x4c\x07\x20\x00\x7f\x25\x24\x00\x2f\x94\xab\x91\xbf\x6a\x07\xd0\x9e\xed\x98\xcf\x01\xaa\x93\x4f\x00\x9c\x27\x81\xd9\x00\xd0\x92\x9f\x0d\x80\xf6\x36\x50\xdb\x51\xb5\x57\xff\x47\xfe\xcb\x74\x00\x02\xf0\xf7\xa6\x99\xf4\x08\x38\x0d\x00\x51\xe4\x8f\xea\x00\x28\xbf\x56\x3f\x04\xc0\xaa\x9c\xd1\x2e\xcb\xc3\xb0\x73\x45\x2b\xf7\x0e\xd8\x16\x60\xd4\x0f\x66\xa6\x25\x1f\x35\x31\x01\x40\x29\xe9\xf4\x43\x00\xce\x67\x0f\xaa\x45\xad\x1a\xfc\x5e\xa3\xea\xe4\x3b\x79\x3b\xcd\xb3\xe8\x60\x5d\x00\x04\xc0\x49\x02\x01\x70\x0a\xe8\x35\xb7\x92\xef\x9d\xf7\xe6\x2c\xdf\xf4\x9f\x3f\xde\x78\xac\x3a\x94\xef\x00\xd6\xc4\xbd\x82\x6f\x0f\x40\x2b\x40\x54\x2b\xcc\x06\xc0\xa1\xcb\x2c\x3d\xbc\xf9\x9b\x3b\x00\x01\xb8\xef\x21\xdb\x01\x50\x8d\xfc\x51\x5b\x80\xd5\xef\x01\x8c\x77\x45\x6b\xe7\x87\x75\x00\x02\xa0\x95\xfe\x73\xfc\x32\x00\x68\x65\x88\x4a\x5c\x1b\xe7\xe8\xf1\x51\x3a\xc0\x3b\x80\x56\xa8\xa8\xc4\xb5\x71\x8e\x1e\x1f\xa5\x03\x01\x18\x5d\xd9\x8e\xff\x9b\x57\xeb\xa6\xd4\x66\xca\x24\x77\x1a\x44\x91\x1f\x5c\xf7\xee\x51\xf2\xac\x8b\x41\x02\x10\x44\xc2\x97\x37\xaa\xfe\xd5\x62\x76\x47\x20\x00\x04\x20\x48\x81\xd7\xb4\xbb\x6d\x01\xda\x15\x7e\xd5\x29\x50\x55\x63\x07\x40\x29\x29\xf4\xb3\x3c\x00\x55\x8e\x40\x85\xf5\x82\x0d\xeb\xed\xf9\xd2\x8b\x3e\x74\x47\x80\x77\x00\x02\xf0\x9d\x99\xe5\x01\xb0\xee\xe5\x5a\x3b\xf4\x0a\x80\x2d\xf1\xc6\x91\xb4\xd5\x5b\xf3\xb1\xda\xb5\xf9\xc2\x3a\x80\xb6\x90\xed\xb3\x83\xa8\x16\x48\x00\x40\x0a\x68\x01\xf0\x12\xec\xb5\x07\xa5\x7d\xe9\xc6\xaa\x87\x74\x21\xa0\xe2\x0f\xeb\x00\xde\x02\x7a\xed\x51\x02\x5e\xf9\xd9\x0e\x00\xad\xa0\x5a\x81\xb4\xfe\xa3\xc6\x4b\xc1\xec\x5d\x2c\xcf\xea\x04\xb0\x0e\xa0\x15\x9c\x00\xdc\x7f\x6d\x3c\x01\xd0\x12\x55\x6c\x7c\x6f\x01\xf4\x3e\x47\xa5\xcb\x0e\x80\x52\x52\xe9\xa7\x57\xe0\xde\xe7\xca\xe9\x2e\x87\x4f\x07\xa0\xb7\xf7\x5d\x45\x3a\xab\x25\xa2\x84\xed\x5d\x1c\x1e\x9f\x5f\xe5\x25\xbd\x96\xf0\xc6\x4b\x00\xbc\x0a\x2a\xed\xa5\x85\x95\x8e\x53\x4e\xff\xdf\xf0\x61\x00\xf4\x4e\xc2\xa4\x2d\xae\xe7\xc7\x2b\xc0\x2c\x7b\x6b\x41\xa5\x3a\x59\xf3\x20\x00\x56\xe5\x94\x76\xcb\x03\x60\x4d\x50\xa9\xe3\xb7\xaf\x65\x1b\x06\xb1\x36\xb6\x6f\xe3\xbd\xba\x94\xe9\x00\xde\x44\xa5\x62\xcf\x9a\x47\x1a\x4f\x6f\x9c\x37\xde\xb4\x00\x78\x13\xeb\x09\xd7\xfb\x3c\x7a\xfe\xea\xf1\x9d\x77\x21\xbd\x44\xbc\xb7\x33\x56\xff\x3d\x3b\x02\xd0\x53\x48\xf6\xb9\x7a\xff\xcc\x2e\xbc\x2c\x6d\x8e\x32\x77\x00\x02\xb0\x16\x3c\xea\x0e\xb0\x56\xfa\xcc\x86\x00\x6c\xce\x00\x01\x20\x00\x9b\x2b\xb0\x79\xfa\xec\x00\x04\x60\x73\x05\x36\x4f\x7f\x78\x07\xd8\xfd\xf9\x7f\x76\xbe\x08\x40\xf6\x0a\x0d\x8e\x0f\x0e\x80\x75\xc5\x6b\xf3\x5c\xe5\x0d\x21\x6d\xde\xe8\xf1\x04\x00\xad\x68\x31\x7f\x6e\x00\x66\xad\xf8\x56\x57\x76\x00\x0c\x69\x04\x00\xa3\x63\x59\x2f\x66\x00\xa2\x56\x3e\x3b\x01\x96\x35\x02\x80\xd5\xb3\x9c\x37\x38\x00\xd2\xdf\x2c\x8a\xfa\xb9\xf4\x72\x15\x1a\x1c\x30\x01\x18\x2c\x70\x76\xf7\x04\x20\x7b\x85\x06\xc7\x47\x00\x06\x0b\x9c\xdd\xbd\x1a\x80\x9b\xff\xd4\x31\xe5\xfa\xf6\x9b\xb7\x5e\x7b\x75\x2e\xa6\x09\x17\x33\x52\x8b\x46\x00\xd6\x22\xc0\x0d\x80\xf4\xaa\xff\x4a\x36\x76\x80\x58\xa0\x08\x40\xac\xfe\xe1\xb3\x97\x07\x20\xea\x67\xe3\xc3\x2b\x07\x0a\x80\x00\x80\x84\xac\xea\x26\x0c\x80\xf6\x24\x50\x7b\x2d\xf1\x76\xed\xa0\xce\xa1\x6a\xb1\x46\xc4\xad\x16\xef\xcb\x7f\x06\x99\xe2\x22\x00\x26\xd9\xe0\x46\x6e\x00\xe0\x11\x29\x1d\xf2\xbd\x00\xa5\x60\xcd\x70\x02\xe0\xd3\xaf\xbc\x35\x01\x28\x5f\x42\x5f\x02\x04\xc0\xa7\x5f\x79\xeb\xb2\x00\x70\xef\xc7\xb0\x47\x00\x30\x3a\x96\xf5\xa2\x06\xa0\xcd\x34\xea\xdd\x40\x76\x00\x0c\x73\x04\x00\xa3\x63\x59\x2f\x6e\x00\x8e\xcc\x67\x75\x02\xae\x7c\x2c\x6b\x04\x00\xab\x67\x39\x6f\x30\x00\xb4\x99\x8f\xfe\x02\x44\x6d\x3c\xbb\x8e\x27\x00\xbb\x56\xfe\x95\x37\x01\x20\x00\x31\x0a\x70\x0b\x88\xd1\xbd\x9d\x75\x7a\x07\xe0\x17\x4d\xe6\x28\xfc\x11\x05\x01\xc8\x55\x8f\xe9\xd1\x4c\x03\x80\x2b\x7f\x7a\x6d\x45\x13\x12\x00\x91\x4c\xeb\x0e\x0a\x03\xe0\xdc\x83\xb4\x2f\x03\xae\x5b\x8b\x90\xcc\x08\x40\x88\xec\x79\x26\xed\x02\x60\xdd\xbb\x7b\xcf\x06\x8e\x33\x7d\xeb\xed\xa0\xd5\x2e\x8f\xf4\x39\x22\x21\x00\x39\xea\x10\x16\x45\x17\x00\xef\xd3\x3e\xe9\x4a\x97\x76\x1a\xe9\xb8\x30\x45\x8b\x4d\x4c\x00\x8a\x15\x0c\x1d\xae\x18\x00\xef\xc4\xd2\x3d\xbb\x77\xed\xc0\xbb\x07\x6f\x25\x3e\xed\x09\x00\x56\xcf\x72\xde\xd2\x01\x50\x4e\xc1\xe2\x01\x13\x80\xe2\x05\xf4\x86\x3f\x1c\x00\xee\xe9\xde\x12\x8d\xb5\x27\x00\x63\xf5\x4d\xef\x7d\x18\x00\x57\xf7\xeb\xd2\x8e\xc0\xab\xfd\x39\xec\x10\x80\x39\x3a\xa7\x9d\x05\x0e\x80\xf4\xa4\xae\x77\x2e\x70\xf3\x75\x74\xf0\x98\xd3\x56\x67\x42\x60\x70\x31\x09\xc0\x84\xaa\x01\xa7\x80\x01\x20\x2d\xbc\x35\x76\x76\x04\xab\x72\xf7\x76\x04\x60\x8c\xae\x65\xbc\xc2\x00\x28\x93\x31\x03\xfd\x50\x80\x00\x6c\x0e\xc4\x2f\x60\x86\x6e\xbd\x8c\x2b\xcb\x60\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x00\x00\x01\x00\x00\xff\xff\xbc\x50\x7d\x35\xa3\x05\x00\x00")

func spritesPlayerPngBytes() ([]byte, error) {
	return bindataRead(
		_spritesPlayerPng,
		"sprites/player.png",
	)
}

func spritesPlayerPng() (*asset, error) {
	bytes, err := spritesPlayerPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sprites/player.png", size: 1443, mode: os.FileMode(420), modTime: time.Unix(1498851153, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sprites/loot.png": spritesLootPng,
	"sprites/player.png": spritesPlayerPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sprites": &bintree{nil, map[string]*bintree{
		"loot.png": &bintree{spritesLootPng, map[string]*bintree{}},
		"player.png": &bintree{spritesPlayerPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

